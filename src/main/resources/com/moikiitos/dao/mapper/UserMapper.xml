<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.moikiitos.dao.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.moikiitos.dao.model.User">
    <id column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="user_number" jdbcType="BIGINT" property="userNumber" />
    <result column="nick_name" jdbcType="VARCHAR" property="nickName" />
    <result column="login_password" jdbcType="VARCHAR" property="loginPassword" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="real_name" jdbcType="VARCHAR" property="realName" />
    <result column="gender" jdbcType="VARCHAR" property="gender" />
    <result column="age" jdbcType="TINYINT" property="age" />
    <result column="header_url" jdbcType="VARCHAR" property="headerUrl" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="email_active" jdbcType="TINYINT" property="emailActive" />
    <result column="phone_num" jdbcType="VARCHAR" property="phoneNum" />
    <result column="register_time" jdbcType="TIMESTAMP" property="registerTime" />
    <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="login_nums" jdbcType="INTEGER" property="loginNums" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_id, user_number, nick_name, login_password, salt, real_name, gender, age, header_url, 
    status, email, email_active, phone_num, register_time, last_login_time, update_time, 
    login_nums
  </sql>
  <select id="selectByExample" parameterType="com.moikiitos.dao.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.moikiitos.dao.model.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.moikiitos.dao.model.User">
    insert into user (user_id, user_number, nick_name, 
      login_password, salt, real_name, 
      gender, age, header_url, 
      status, email, email_active, 
      phone_num, register_time, last_login_time, 
      update_time, login_nums)
    values (#{userId,jdbcType=BIGINT}, #{userNumber,jdbcType=BIGINT}, #{nickName,jdbcType=VARCHAR}, 
      #{loginPassword,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR}, 
      #{gender,jdbcType=VARCHAR}, #{age,jdbcType=TINYINT}, #{headerUrl,jdbcType=VARCHAR}, 
      #{status,jdbcType=TINYINT}, #{email,jdbcType=VARCHAR}, #{emailActive,jdbcType=TINYINT}, 
      #{phoneNum,jdbcType=VARCHAR}, #{registerTime,jdbcType=TIMESTAMP}, #{lastLoginTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{loginNums,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.moikiitos.dao.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="userNumber != null">
        user_number,
      </if>
      <if test="nickName != null">
        nick_name,
      </if>
      <if test="loginPassword != null">
        login_password,
      </if>
      <if test="salt != null">
        salt,
      </if>
      <if test="realName != null">
        real_name,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="headerUrl != null">
        header_url,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="emailActive != null">
        email_active,
      </if>
      <if test="phoneNum != null">
        phone_num,
      </if>
      <if test="registerTime != null">
        register_time,
      </if>
      <if test="lastLoginTime != null">
        last_login_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="loginNums != null">
        login_nums,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="userNumber != null">
        #{userNumber,jdbcType=BIGINT},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=TINYINT},
      </if>
      <if test="headerUrl != null">
        #{headerUrl,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="emailActive != null">
        #{emailActive,jdbcType=TINYINT},
      </if>
      <if test="phoneNum != null">
        #{phoneNum,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null">
        #{registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null">
        #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="loginNums != null">
        #{loginNums,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.moikiitos.dao.model.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.userNumber != null">
        user_number = #{record.userNumber,jdbcType=BIGINT},
      </if>
      <if test="record.nickName != null">
        nick_name = #{record.nickName,jdbcType=VARCHAR},
      </if>
      <if test="record.loginPassword != null">
        login_password = #{record.loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.salt != null">
        salt = #{record.salt,jdbcType=VARCHAR},
      </if>
      <if test="record.realName != null">
        real_name = #{record.realName,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=VARCHAR},
      </if>
      <if test="record.age != null">
        age = #{record.age,jdbcType=TINYINT},
      </if>
      <if test="record.headerUrl != null">
        header_url = #{record.headerUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.emailActive != null">
        email_active = #{record.emailActive,jdbcType=TINYINT},
      </if>
      <if test="record.phoneNum != null">
        phone_num = #{record.phoneNum,jdbcType=VARCHAR},
      </if>
      <if test="record.registerTime != null">
        register_time = #{record.registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastLoginTime != null">
        last_login_time = #{record.lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.loginNums != null">
        login_nums = #{record.loginNums,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set user_id = #{record.userId,jdbcType=BIGINT},
      user_number = #{record.userNumber,jdbcType=BIGINT},
      nick_name = #{record.nickName,jdbcType=VARCHAR},
      login_password = #{record.loginPassword,jdbcType=VARCHAR},
      salt = #{record.salt,jdbcType=VARCHAR},
      real_name = #{record.realName,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=VARCHAR},
      age = #{record.age,jdbcType=TINYINT},
      header_url = #{record.headerUrl,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=TINYINT},
      email = #{record.email,jdbcType=VARCHAR},
      email_active = #{record.emailActive,jdbcType=TINYINT},
      phone_num = #{record.phoneNum,jdbcType=VARCHAR},
      register_time = #{record.registerTime,jdbcType=TIMESTAMP},
      last_login_time = #{record.lastLoginTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      login_nums = #{record.loginNums,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.moikiitos.dao.model.User">
    update user
    <set>
      <if test="userNumber != null">
        user_number = #{userNumber,jdbcType=BIGINT},
      </if>
      <if test="nickName != null">
        nick_name = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        login_password = #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        salt = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        real_name = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=TINYINT},
      </if>
      <if test="headerUrl != null">
        header_url = #{headerUrl,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="emailActive != null">
        email_active = #{emailActive,jdbcType=TINYINT},
      </if>
      <if test="phoneNum != null">
        phone_num = #{phoneNum,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null">
        register_time = #{registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null">
        last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="loginNums != null">
        login_nums = #{loginNums,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.moikiitos.dao.model.User">
    update user
    set user_number = #{userNumber,jdbcType=BIGINT},
      nick_name = #{nickName,jdbcType=VARCHAR},
      login_password = #{loginPassword,jdbcType=VARCHAR},
      salt = #{salt,jdbcType=VARCHAR},
      real_name = #{realName,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=VARCHAR},
      age = #{age,jdbcType=TINYINT},
      header_url = #{headerUrl,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      email = #{email,jdbcType=VARCHAR},
      email_active = #{emailActive,jdbcType=TINYINT},
      phone_num = #{phoneNum,jdbcType=VARCHAR},
      register_time = #{registerTime,jdbcType=TIMESTAMP},
      last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      login_nums = #{loginNums,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>

  <select id="selectByEmail" parameterType="java.lang.String" resultMap="BaseResultMap">
    select user_id, user_number, nick_name, login_password, salt, real_name, gender,
           age, status, email, email_active, phone_num, register_time, last_login_time, login_nums,
           header_url
    from user
    where email = #{email,jdbcType=VARCHAR}
  </select>

  <select id="selectByRealName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select user_id, user_number, nick_name, login_password, salt, real_name, gender,
           age, status, email, email_active, phone_num, register_time, last_login_time, login_nums,
           header_url
    from user
    where real_name = #{realName,jdbcType=VARCHAR}
  </select>

  <select id="selectUserInfo" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select user_id, nick_name, real_name, gender,
           age, status, email, email_active, phone_num, register_time, last_login_time, login_nums,
           header_url
    from user
    where user_id = #{userId,jdbcType=BIGINT}
  </select>

  <select id="selectUsersInfo" parameterType="java.util.List" resultMap="BaseResultMap">
    select user_id, user_number, nick_name, login_password, salt, real_name, gender,
    age, status, email, email_active, phone_num, register_time, last_login_time, login_nums,
    header_url
    from user
    where user_id in
    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>
</mapper>